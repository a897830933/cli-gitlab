// Generated by CoffeeScript 1.8.0
var packageInfo, program, projects, tablehead, users, worker;

program = require("commander");

packageInfo = require("./../package.json");

worker = require("./worker.js");

program.usage("[options]").version(packageInfo.version).option("-o, --option", "Get option", worker.getOption);

program.command("url [url]").description("Get or Set url of gitlab").action(worker.url);

program.command("token [token]").description("Get or Set token of gitlab").action(worker.token);

program.command("me").description("Get current user").action(worker.users.current);

projects = program.command("projects").description("Get projects from gitlab").option("--id <projectId>", "Project id").action(function(cmd, options) {
  var map;
  if (options == null) {
    options = cmd;
    cmd = null;
  }
  if (cmd != null) {
    if (options.id != null) {
      map = {
        members: worker.projects.members.list,
        show: worker.projects.show,
        branches: worker.projects.repository.branches,
        commits: worker.projects.repository.commits,
        tags: worker.projects.repository.tags
      };
      if (map[cmd] != null) {
        return map[cmd](options.id);
      } else {
        return console.log("  error: command %s missing", cmd);
      }
    } else {
      return console.log("  error: option `--id <projectId>' argument missing");
    }
  } else {
    return worker.projects.all();
  }
});

projects.command("members", "Get members by id from project");

projects.command("show", "Get project by id from gitlab");

projects.command("branches", "Get retrive branches of a given project");

projects.command("commits", "Get retrive commits of a given project");

projects.command("tags", "Get retrive tags of a given project");

projects.command("tree", "Get retrive tree of a given project");

users = program.command("users").description("Get users from gitlab").action(function(cmd) {
  var argLen, options, userId;
  argLen = arguments.length;
  if (typeof arguments[0] === "object") {
    cmd = null;
  }
  options = arguments[argLen - 1];
  if (cmd != null) {
    if (cmd === "current") {
      return worker.users.current();
    } else if (cmd === "show") {
      userId = typeof arguments[1] !== "object" ? arguments[1] : null;
      if (userId != null) {
        return worker.users.show(userId);
      } else {
        return console.log("  error: `show <userId>' argument missing");
      }
    } else {
      return console.log("  error: command %s missing", cmd);
    }
  } else {
    return worker.users.all();
  }
});

users.command("current", "Get current user");

users.command("show <userId>", "Show user by user id");

program.command("issues").description("Get issues from gitlab").action(worker.issues.all);

tablehead = program.command("table-head").option("--type <type>", "Type of table head [user]").description("Control output. Get origin, get, set, remove or add head").action(function(cmd) {
  var argLen, cmdParam, options;
  argLen = arguments.length;
  if (typeof arguments[0] === "object") {
    cmd = null;
  }
  options = arguments[argLen - 1];
  if (cmd != null) {
    if (options.type != null) {
      cmdParam = typeof arguments[1] !== "object" ? arguments[1] : null;
      switch (cmd) {
        case "set":
          if (cmdParam != null) {
            return worker.tableHead.set(options.type, cmdParam.trim().split(","));
          } else {
            return console.log("  error: `set <head1,head2>' argument missing");
          }
          break;
        case "get":
        case "reset":
        case "getOrigin":
          return worker.tableHead[cmd](options.type);
        case "remove":
        case "add":
          if (cmdParam != null) {
            return worker.tableHead[cmd](options.type, cmdParam);
          } else {
            return console.log("  error: `" + options.type + " <column>' argument missing");
          }
      }
    } else {
      return console.log("  error: `--type <type>' argument missing");
    }
  } else {
    return worker.tableHead.getType();
  }
});

tablehead.command("getOrigin", "Get origin table head by type");

tablehead.command("set <head1,head2>", "Set and store table head by type. Example: gitlab table-head set 'id','name','username' --type user");

tablehead.command("get", "Get table head by type");

tablehead.command("add <column>", "Add a head to table");

tablehead.command("remove <column>", "Remove a head to table");

tablehead.command("reset", "Reset table head to origin");

program.parse(process.argv);

if (process.argv.length === 2) {
  program.help();
}
